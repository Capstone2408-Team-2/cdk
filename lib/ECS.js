"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ECS = void 0;
const constructs_1 = require("constructs");
const cdk = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const ecs = require("aws-cdk-lib/aws-ecs");
const lambda = require("aws-cdk-lib/aws-lambda");
const sqs = require("aws-cdk-lib/aws-sqs");
const secretsmanager = require("aws-cdk-lib/aws-secretsmanager");
const eventsources = require("aws-cdk-lib/aws-lambda-event-sources");
const DynamoDB_1 = require("./DynamoDB");
const path = require("path");
class ECS extends constructs_1.Construct {
    constructor(scope, id, vpc, inboundPeerSecurityGroup, elasticache) {
        super(scope, id);
        /** EDIT THESE VARIABLES PER YOUR REQUIREMENTS HERE, THE REST OF THE CODE REMAINS THE SAME **/
        const ecrImage = "public.ecr.aws/q8e0a8z0/avery-ws-server:latest";
        const taskCpuArchitecture = ecs.CpuArchitecture.ARM64;
        /** END **/
        const secret = new secretsmanager.Secret(this, "ApiKeySecret", {
            secretName: "api-key-secret",
            generateSecretString: {
                secretStringTemplate: JSON.stringify({}),
                generateStringKey: "apiKey",
                passwordLength: 32,
            },
        });
        const dynamodb = new DynamoDB_1.DynamoDB(this, "DynamoDB", vpc);
        // Define the Dead Letter Queue (DLQ)
        const dlq = new sqs.Queue(this, "MyDLQ", {
            retentionPeriod: cdk.Duration.days(14),
        });
        const queue = new sqs.Queue(this, "EventQueueQueue", {
            visibilityTimeout: cdk.Duration.seconds(5),
            deadLetterQueue: {
                maxReceiveCount: 5, // After 5 failed attempts, the message will be moved to the DLQ
                queue: dlq,
            },
        });
        const myFunction = new lambda.Function(this, "MyFunction", {
            runtime: lambda.Runtime.NODEJS_16_X,
            handler: `index.handler`, //change index to your lamda name
            code: lambda.Code.fromAsset(path.join(__dirname, "../lambda")), // assuming your Lambda code is in the 'lambda' directory
            environment: {
                DYNAMODB_MESSAGES_TABLE_NAME: dynamodb.messagesTable.tableName,
                DYNAMODB_CHANNELS_TABLE_NAME: dynamodb.channelsTable.tableName,
            },
        });
        // Add the SQS queue as an event source for the Lambda function
        myFunction.addEventSource(new eventsources.SqsEventSource(queue));
        // Grant permissions for Lambda to write to DynamoDB table
        dynamodb.messagesTable.grantReadWriteData(myFunction);
        dynamodb.channelsTable.grantReadWriteData(myFunction);
        queue.grantSendMessages(dynamodb.ecsTaskRole);
        queue.grantConsumeMessages(myFunction);
        dlq.grantSendMessages(myFunction);
        const taskDefinition = new ecs.FargateTaskDefinition(this, "WebSocketServer-TaskDef", {
            cpu: 256,
            memoryLimitMiB: 512,
            runtimePlatform: {
                operatingSystemFamily: ecs.OperatingSystemFamily.LINUX,
                cpuArchitecture: taskCpuArchitecture,
            },
            taskRole: dynamodb.ecsTaskRole, // Assign the IAM role to the task definition
        });
        // Create a security group for the container
        const ecsSecurityGroup = new ec2.SecurityGroup(this, "ContainerFromALBSecurityGroup", {
            vpc,
            description: "Allow HTTP traffic from ALB to Containers",
            allowAllOutbound: true, // Allow outbound traffic
        });
        // Allow inbound HTTP traffic from ALB on any port
        ecsSecurityGroup.addIngressRule(inboundPeerSecurityGroup, ec2.Port.tcpRange(0, 65535), // Allow TCP traffic for ports 0-65535
        "Allow traffic from ALB to containers");
        // Add a container and redis env to the task definition
        taskDefinition.addContainer("WebSocketServer-Container", {
            image: ecs.ContainerImage.fromRegistry(ecrImage),
            memoryLimitMiB: 512,
            cpu: 256,
            portMappings: [{ containerPort: 8000 }],
            environment: {
                QUEUE_URL: queue.queueUrl,
                REDIS_ENDPOINT_ADDRESS: elasticache.redisEndpointAddress,
                REDIS_ENDPOINT_PORT: elasticache.redisEndpointPort,
                DYNAMODB_MESSAGES_TABLE_NAME: dynamodb.messagesTable.tableName,
                DYNAMODB_CHANNELS_TABLE_NAME: dynamodb.channelsTable.tableName,
            },
            logging: new ecs.AwsLogDriver({
                streamPrefix: "WebSocketServer-Container",
            }),
        });
        const cluster = new ecs.Cluster(this, "WebSocketServer-Cluster", { vpc });
        this.service = new ecs.FargateService(this, "WebSocketServer-FargateService", {
            cluster,
            taskDefinition,
            desiredCount: 2,
            assignPublicIp: false,
            securityGroups: [ecsSecurityGroup],
        });
        this.service.node.addDependency(elasticache);
        new cdk.CfnOutput(this, "ApiKeySecretArnOutput", {
            value: secret.secretArn,
            description: "The ARN of the API key secret",
            exportName: "ApiKeySecretArn",
        });
    }
}
exports.ECS = ECS;
//# sourceMappingURL=data:application/json;base64,